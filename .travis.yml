language: node_js
node_js: 12.17.0

jobs:
  include:
    - name: node packages linux
      os: linux 
      services:
       - xvfb
      addons:
       chrome: stable
      before_install:
       - export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1
       - export DOTNET_CLI_TELEMETRY_OPTOUT=1
       - wget -q https://packages.microsoft.com/config/ubuntu/16.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
       - sudo dpkg -i packages-microsoft-prod.deb
       - sudo apt-get update
       - sudo apt-get install apt-transport-https
       - sudo apt-get update
       - sudo apt-get install dotnet-sdk-3.1
      install: 
       - npm install -g npm@'>=6.14.5'
       - "cd coreclr-hosting"
       - rm -rf node_modules
       - rm -f package-lock.json
       - npm i -g prebuild
       - npm i --build-from-source
       - if [ "$TRAVIS_TAG" != "" ]; then
           npm version "${TRAVIS_TAG:1}" --allow-same-version;
           prebuild -t 12.17.0 --include-regex "\.(node|a|dll|so|dylib)$";
           prebuild -t 14.16.0 --include-regex "\.(node|a|dll|so|dylib)$";           
           prebuild -t 11.0.0 -r electron --include-regex "\.(node|a|dll|so|dylib)$";
           prebuild -t 12.0.0 -r electron --include-regex "\.(node|a|dll|so|dylib)$";
         fi
       # TODO: Why is process.env.DEBUG set when building production?
       - "cd ../electron-blazor-glue"
       - rm -rf node_modules
       - rm -f package-lock.json
       - npm i       
      script:
       - cd ../coreclr-hosting
       - npm run prepare             
       - npm run build-testapp
       - npm run mocha
       - cd ../electron-blazor-glue
       - npm run prepare   
       - cd ../examples/electron-blazor       
       - rm -rf node_modules
       - rm -f package-lock.json
       - npm i
       # TODO DM 01.09.2020: Spectron does not support Electron 10 yet! Re-enable tests once it does.
       #- export DISPLAY=:99.0
       #- sleep 3
       #- npm run test    
      after_success:
       - echo $TRAVIS_TAG
       - cd ..
       - cd ..
       - ./ci_npm_publish.sh
      deploy:
       - provider: releases
         skip_cleanup: true
         token: $GITHUB_TOKEN
         file_glob: true
         file: coreclr-hosting/prebuilds/*
         overwrite: true
         on:
          tags: true

    - name: prebuild coreclr-hosting osx
      os: osx  
      osx_image: xcode12.2 
      addons:
        homebrew:
          update: true
          taps: isen-ng/dotnet-sdk-versions
          casks:
           - dotnet-sdk3-1-400
           - dotnet-sdk
      install: 
       - "cd coreclr-hosting"
       - npm install -g npm@'>=6.14.5'
       - dotnet --version
       - npm i -g prebuild
       - npm i --build-from-source
       - if [ "$TRAVIS_TAG" != "" ]; then
           npm version "${TRAVIS_TAG:1}" --allow-same-version;
           prebuild -t 12.17.0 --include-regex "\.(node|a|dll|so|dylib)$";
           prebuild -t 14.16.0 --include-regex "\.(node|a|dll|so|dylib)$";           
           prebuild -t 11.0.0 -r electron --include-regex "\.(node|a|dll|so|dylib)$";
           prebuild -t 12.0.0 -r electron --include-regex "\.(node|a|dll|so|dylib)$";
         fi
      script:
       - npm run build-testapp
       - npm run mocha
       - cd ..
      deploy:
        skip_cleanup: true
        provider: releases
        token: $GITHUB_TOKEN
        file_glob: true
        file: coreclr-hosting/prebuilds/*
        overwrite: true
        on:
          tags: true

    - name: prebuild coreclr-hosting windows
      os: windows         
      install: 
       - choco install dotnetcore-sdk
       - "cd coreclr-hosting"
       # - npm install -g npm@'>=6.14.5'
       - dotnet --version
       - npm i -g prebuild
       - npm ci --build-from-source
       - if [ "$TRAVIS_TAG" != "" ]; then
           npm version "${TRAVIS_TAG:1}" --allow-same-version;
           prebuild -t 12.17.0 --include-regex "\.(node|a|dll|so|dylib)$";
           prebuild -t 14.16.0 --include-regex "\.(node|a|dll|so|dylib)$";           
           prebuild -t 11.0.0 -r electron --include-regex "\.(node|a|dll|so|dylib)$";
           prebuild -t 12.0.0 -r electron --include-regex "\.(node|a|dll|so|dylib)$";
         fi
      script:
       - npm run build-testapp
       - npm run mocha
       - cd ..
      deploy:
        skip_cleanup: true
        provider: releases
        token: $GITHUB_TOKEN
        file_glob: true
        file: coreclr-hosting/prebuilds/*
        overwrite: true
        on:
          tags: true
    - 
      name: C# nuget packages      
      language: csharp
      mono: none
      dotnet: 5.0
      script:
       - echo "Creating package version ""${TRAVIS_TAG:1}"
       - cd NodeHostEnvironment
       - dotnet pack -c Release       
       - cd ../ElectronHostedBlazor
       - dotnet pack -c Release
      after_success:
       - cd ..
       - if [ "$TRAVIS_TAG" != "" ]; then
           cd NodeHostEnvironment/bin/Release;
           dotnet nuget push NodeHostEnvironment."${TRAVIS_TAG:1}".nupkg -k "$NUGET_TOKEN" -s https://api.nuget.org/v3/index.json;
           dotnet nuget push NodeHostEnvironment."${TRAVIS_TAG:1}".snupkg -k "$NUGET_TOKEN" -s https://api.nuget.org/v3/index.json;
           cd ../../../ElectronHostedBlazor/bin/Release;
           dotnet nuget push ElectronHostedBlazor."${TRAVIS_TAG:1}".nupkg -k "$NUGET_TOKEN" -s https://api.nuget.org/v3/index.json;
           dotnet nuget push ElectronHostedBlazor."${TRAVIS_TAG:1}".snupkg -k "$NUGET_TOKEN" -s https://api.nuget.org/v3/index.json;
           cd ../../..;
         fi
      deploy:
        skip_cleanup: true
        provider: releases
        token: $GITHUB_TOKEN
        file_glob: true
        file: 
         - NodeHostEnvironment/bin/Release/*.snupkg
         - NodeHostEnvironment/bin/Release/*.nupkg
         - ElectronHostedBlazor/bin/Release/*.snupkg
         - ElectronHostedBlazor/bin/Release/*.nupkg
        overwrite: true
        on:
          tags: true
