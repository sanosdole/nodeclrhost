@inject NavigationManager UriHelper

<!-- <p>Hallo Blazor</p>
<CascadingAuthenticationState> -->
    <Router AppAssembly="typeof(Startup).Assembly">
        <Found Context="routeData">
            <RouteView RouteData="routeData" DefaultLayout="typeof(MainLayout)" />
        </Found>
        <NotFound>
            <h1>Page not found</h1>
            <p>Sorry, but there's nothing here!</p>
        </NotFound>
    </Router>
    <!--
</CascadingAuthenticationState>
-->


@code {
    static readonly char[] _queryOrHashStartChar = new[] { '?', '#' };
    string LocationPath = null;
    string _baseUri;
    string _locationAbsolute;

    protected override void OnInitialized()
    {
        /*UriHelper.OnLocationChanged += OnLocationChanged;
        _baseUri = UriHelper.GetBaseUri();
        _locationAbsolute = UriHelper.GetAbsoluteUri();
        LocationPath = UriHelper.ToBaseRelativePath(_baseUri, _locationAbsolute);
        LocationPath = StringUntilAny(LocationPath, _queryOrHashStartChar);*/
    }

    private string StringUntilAny(string str, char[] chars)
    {
        var firstIndex = str.IndexOfAny(chars);
        return firstIndex < 0
            ? str
            : str.Substring(0, firstIndex);
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        /*_baseUri = UriHelper.GetBaseUri();
        _locationAbsolute = UriHelper.GetAbsoluteUri();
        LocationPath = UriHelper.ToBaseRelativePath(_baseUri, _locationAbsolute);
        LocationPath = StringUntilAny(LocationPath, _queryOrHashStartChar);  */      
        StateHasChanged();
    }
}
